import React, { useState } from "react";
import axios from "axios";

const API_BASE_URL = process.env.REACT_APP_API_URL || "http://localhost:5000"; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

const UserList = ({ users }) => {
  const [selectedRole, setSelectedRole] = useState({}); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  const handleBlockUser = async (userId) => {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "zablokowany"
      const response = await axios.post(
        `${API_BASE_URL}/roles/assign/${userId}/zablokowany`
      );
      if (response.status === 200) {
        alert("U≈ºytkownik zosta≈Ç zablokowany!");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      alert("B≈ÇƒÖd przy blokowaniu u≈ºytkownika");
    }
  };

  const handleUnblockUser = async (userId) => {
    const newRole = selectedRole[userId]; // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–æ–ª—å –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é
      const response = await axios.post(
        `${API_BASE_URL}/roles/assign/${userId}/${newRole}`
      );
      if (response.status === 200) {
        alert("U≈ºytkownik zosta≈Ç odblokowany i rola zosta≈Ça zmieniona!");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–∏–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      alert("B≈ÇƒÖd przy odblokowywaniu u≈ºytkownika");
    }
  };

  const handleRoleChange = (userId, role) => {
    setSelectedRole((prev) => ({
      ...prev,
      [userId]: role,
    }));
  };

  return (
    <div className="admin-section">
      <h3>üë• Lista u≈ºytkownik√≥w</h3>
      <table>
        <thead>
          <tr>
            <th>ID</th>
            <th>E-mail</th>
            <th>Rola</th>
            <th>Akcje</th>
          </tr>
        </thead>
        <tbody>
          {users.map((user) => (
            <tr key={user.id}>
              <td>{user.id}</td>
              <td>{user.email}</td>
              <td>{user.role.name}</td>
              <td>
                {/* –ï—Å–ª–∏ —Ä–æ–ª—å "zablokowany", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "Odblokuj" —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏ */}
                {user.role.name === "zablokowany" ? (
                  <div>
                    <select
                      value={selectedRole[user.id] || ""}
                      onChange={(e) =>
                        handleRoleChange(user.id, e.target.value)
                      }
                    >
                      <option value="">Wybierz rolƒô</option>
                      <option value="user">User</option>
                      <option value="admin">Admin</option>
                      {/* –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ä–æ–ª–∏ —Å—é–¥–∞ */}
                    </select>
                    <button onClick={() => handleUnblockUser(user.id)}>
                      Odblokuj
                    </button>
                  </div>
                ) : (
                  <button onClick={() => handleBlockUser(user.id)}>
                    Zablokuj
                  </button>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default UserList;
